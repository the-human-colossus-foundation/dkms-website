import{_ as a,c as t,a as n,b as i,r as o,o as l}from"./app-B1H4axZY.js";const p={};function r(c,s){const e=o("Asciinema");return l(),t("div",null,[s[0]||(s[0]=n(`<h1 id="infrastructure" tabindex="-1"><a class="header-anchor" href="#infrastructure"><span>Infrastructure</span></a></h1><p>DKMS infrastructure is composed of two main components: Witnesses and Watchers. Both are available as Docker images:</p><ul><li><a href="https://ghcr.io/thclab/keriox-witness" target="_blank" rel="noopener noreferrer"> Witness </a></li><li><a href="https://ghcr.io/thclab/keriox-watcher" target="_blank" rel="noopener noreferrer"> Watcher </a></li></ul><p>For sample setup, see <a href="https://github.com/THCLab/dkms-demo/blob/main/infrastructure/docker-compose.yml" target="_blank" rel="noopener noreferrer">this</a>. and for more information see <a href="#setup">setup</a> section.</p><h2 id="argo" tabindex="-1"><a class="header-anchor" href="#argo"><span>Argo</span></a></h2><p>Argo is a sandbox which allows you to test right away the DKMS infrastructure without need to setup anything. Checkout our public <a href="https://dashboard.argo.colossi.network/public-dashboards/2bdeda88c701459e8ec25802f79b7da2" target="_blank" rel="noopener noreferrer">dashboard</a> to see the current state of the network.</p><h2 id="setup" tabindex="-1"><a class="header-anchor" href="#setup"><span>Setup</span></a></h2><p>If you would like to run your own DKMS network, follow the instructions below or simply try <a href="https://github.com/THCLab/dkms-demo/" target="_blank" rel="noopener noreferrer">dkms-demo</a> which is ready to be run locally with docker compose.</p><h3 id="deploy-witnesses" tabindex="-1"><a class="header-anchor" href="#deploy-witnesses"><span>Deploy witnesses</span></a></h3><p>Witnesses play a crucial role in the DKMS infrastructure. They are responsible for disseminating information across the network. In addition witnesses produce reciepts for the controllers as a form of confirmation that he has seen the latest KEL.</p><p>Witness is available as a Docker image. Which can be eailsy deploy, below example using docker compose:</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code><span class="line"><span class="token key atrule">services</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">witness</span><span class="token punctuation">:</span> <span class="token important">&amp;witness</span></span>
<span class="line">    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> keriox<span class="token punctuation">-</span>witness</span>
<span class="line">    <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">&quot;ghcr.io/thclab/keriox-witness:latest&quot;</span></span>
<span class="line">    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always</span>
<span class="line">    <span class="token key atrule">networks</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> dkms<span class="token punctuation">-</span>network</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">  <span class="token key atrule">witness1</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> keriox<span class="token punctuation">-</span>witness1</span>
<span class="line">    <span class="token key atrule">&lt;&lt;</span><span class="token punctuation">:</span> <span class="token important">*witness</span></span>
<span class="line">    <span class="token key atrule">ports</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token string">&quot;3232:3232&quot;</span></span>
<span class="line">    <span class="token key atrule">volumes</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> bind</span>
<span class="line">        <span class="token key atrule">source</span><span class="token punctuation">:</span> ./config/witness1.yml</span>
<span class="line">        <span class="token key atrule">target</span><span class="token punctuation">:</span> /app/witness.yml</span>
<span class="line">      <span class="token punctuation">-</span> witness1_db_data<span class="token punctuation">:</span>/app/db</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>Never use latest tag for docker image for production systems. Always use specific version. See <a href="https://github.com/THCLab/keriox/releases" target="_blank" rel="noopener noreferrer">Release page</a></p></div><h4 id="configuration" tabindex="-1"><a class="header-anchor" href="#configuration"><span>Configuration</span></a></h4><p>To run witness you need to provide a configuration file. Below is an example of it with explanation of each field:</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code><span class="line"><span class="token key atrule">db_path</span><span class="token punctuation">:</span> <span class="token string">&quot;db/&quot;</span> <span class="token comment"># path to the database where witness would store KEL&#39;s</span></span>
<span class="line"><span class="token key atrule">http_port</span><span class="token punctuation">:</span> <span class="token number">3232</span> <span class="token comment"># port on which witness will listen for incoming connections</span></span>
<span class="line"><span class="token key atrule">public_url</span><span class="token punctuation">:</span> <span class="token string">&quot;http://172.17.0.1:3232/&quot;</span> <span class="token comment"># public URL of the witness</span></span>
<span class="line"><span class="token key atrule">seed</span><span class="token punctuation">:</span> <span class="token string">&quot;&lt;YOUR_SEED_GOES_HERE&quot;</span> <span class="token comment"># seed of the witness to generate private key, keep this secret!</span></span>
<span class="line"><span class="token key atrule">escrow_config</span><span class="token punctuation">:</span> <span class="token comment"># Configuration for the escrow system, which acts as a buffer for processing events from KELs</span></span>
<span class="line">  <span class="token key atrule">default_timeout</span><span class="token punctuation">:</span> <span class="token number">60</span> <span class="token comment"># Time (in seconds) before an event is discarded after the last processing attempt. Event is processed only when new event comes.</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="generate-seed" tabindex="-1"><a class="header-anchor" href="#generate-seed"><span>Generate seed</span></a></h5><p>The seed is necessary to generate the private key for the witness. By definition witness operate with empheral keys means they cannot be rotated. If the key is compromised, the witness should be replaced with a new one. To generate the seed you can use <a href="https://github.com/THCLab/dkms-bin/releases" target="_blank" rel="noopener noreferrer">dkms-cli</a> tool:</p>`,18)),i(e,{castId:"xM1MiAzgCsYAWoeHxhEEm3bt8"}),s[1]||(s[1]=n(`<p>The seed should be set in the configuration file. Keep it secret!</p><h4 id="run-witness" tabindex="-1"><a class="header-anchor" href="#run-witness"><span>Run witness</span></a></h4><p>Simply run docker contaienrs with <code>docker-compose up -d</code> command.</p><p>After the witness is running you can check the logs with <code>docker logs keriox-witness</code> command. And you should see something like this:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">keriox-witness1  <span class="token operator">|</span> Witness BJq7UABlttINuWJh1Xl2lkqZG4NTdUdqnbFJDa6ZyxCC is listening on port <span class="token number">3232</span></span>
<span class="line">keriox-witness1  <span class="token operator">|</span> Witness&#39;s oobi: <span class="token punctuation">{</span><span class="token string">&quot;eid&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;BJq7UABlttINuWJh1Xl2lkqZG4NTdUdqnbFJDa6ZyxCC&quot;</span>,<span class="token string">&quot;scheme&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;http&quot;</span>,<span class="token string">&quot;url&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;http://localhost:3232/&quot;</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="deploy-watchers" tabindex="-1"><a class="header-anchor" href="#deploy-watchers"><span>Deploy watchers</span></a></h3><p>Watchers are responsible for detecting duplicity in the network. They are also available as a Docker image. Below is an example of how to deploy them:</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code><span class="line"><span class="token key atrule">watcher</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">container_name</span><span class="token punctuation">:</span> keriox<span class="token punctuation">-</span>watcher</span>
<span class="line">  <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">&quot;ghcr.io/thclab/keriox-watcher:latest&quot;</span></span>
<span class="line">  <span class="token key atrule">restart</span><span class="token punctuation">:</span> always</span>
<span class="line">  <span class="token key atrule">depends_on</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token punctuation">-</span> witness</span>
<span class="line">  <span class="token key atrule">ports</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token punctuation">-</span> <span class="token string">&quot;3235:3235&quot;</span></span>
<span class="line">  <span class="token key atrule">volumes</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> bind</span>
<span class="line">      <span class="token key atrule">source</span><span class="token punctuation">:</span> ./config/watcher.yml</span>
<span class="line">      <span class="token key atrule">target</span><span class="token punctuation">:</span> /app/watcher.yml</span>
<span class="line">    <span class="token punctuation">-</span> watcher_db_data<span class="token punctuation">:</span>/app/db/</span>
<span class="line">  <span class="token key atrule">networks</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token punctuation">-</span> dkms<span class="token punctuation">-</span>network</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="configuration-1" tabindex="-1"><a class="header-anchor" href="#configuration-1"><span>Configuration</span></a></h4><p>To run watcher you need to provide a configuration file. Below is an example of it with explanation of each field:</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code><span class="line"><span class="token key atrule">db_path</span><span class="token punctuation">:</span> <span class="token string">&quot;db/&quot;</span> <span class="token comment"># path to the database where watcher would store KEL&#39;s</span></span>
<span class="line"><span class="token key atrule">tel_storage_path</span><span class="token punctuation">:</span> <span class="token string">&quot;db/tel_storage&quot;</span> <span class="token comment"># path to the database where watcher would store TEL&#39;s</span></span>
<span class="line"><span class="token key atrule">public_url</span><span class="token punctuation">:</span> <span class="token string">&quot;http://172.17.0.1:3235&quot;</span> <span class="token comment"># public url of the watcher</span></span>
<span class="line"><span class="token key atrule">seed</span><span class="token punctuation">:</span> <span class="token string">&quot;&lt;HERE_GOES_SEEF_OF_THE_WATCHER&quot;</span> <span class="token comment"># seed of the watcher to generate private key, keep this secret!</span></span>
<span class="line"><span class="token key atrule">http_port</span><span class="token punctuation">:</span> <span class="token number">3235</span> <span class="token comment"># port on which watcher will listen for incoming connections</span></span>
<span class="line"><span class="token key atrule">escrow_config</span><span class="token punctuation">:</span> <span class="token comment"># Configuration for the escrow system, which acts as a buffer for processing events from KELs</span></span>
<span class="line">  <span class="token key atrule">default_timeout</span><span class="token punctuation">:</span> <span class="token number">60</span> <span class="token comment"># Time (in seconds) before an event is discarded after the last processing attempt. Event is processed only when new event comes.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="generate-seed-1" tabindex="-1"><a class="header-anchor" href="#generate-seed-1"><span>Generate seed</span></a></h4><p>To generate seed see the <a href="#generate-seed">Generate seed</a> section in the witness configuration.</p><h4 id="run-watcher" tabindex="-1"><a class="header-anchor" href="#run-watcher"><span>Run watcher</span></a></h4><p>Simply run docker contaienrs with <code>docker-compose up -d</code> command.</p><p>After the watcher is running you can check the logs with <code>docker logs keriox-watcher</code> command. And you should see something like this:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">keriox-watcher  <span class="token operator">|</span> Using config file: <span class="token string">&quot;./watcher.yml&quot;</span></span>
<span class="line">keriox-watcher  <span class="token operator">|</span> Using environment prefix: <span class="token string">&quot;WATCHER_&quot;</span></span>
<span class="line">keriox-watcher  <span class="token operator">|</span> Watcher BF2t2NPc1bwptY1hYV0YCib1JjQ11k9jtuaZemecPF5b is listening on port <span class="token number">3236</span></span>
<span class="line">keriox-watcher  <span class="token operator">|</span> Watcher&#39;s oobi: <span class="token punctuation">{</span><span class="token string">&quot;eid&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;BF2t2NPc1bwptY1hYV0YCib1JjQ11k9jtuaZemecPF5b&quot;</span>,<span class="token string">&quot;scheme&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;http&quot;</span>,<span class="token string">&quot;url&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;http://localhost:3236/&quot;</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="next-steps" tabindex="-1"><a class="header-anchor" href="#next-steps"><span>Next Steps</span></a></h2><p>After you have deployed witnesses and watchers, you can start using the <a href="https://github.com/THCLab/dkms-bin/releases" target="_blank" rel="noopener noreferrer">DKMS-CLI</a> to start interacting with them. See the <a href="/developer-guide/client">CLI documentation</a> for more information.</p>`,19))])}const d=a(p,[["render",r]]),h=JSON.parse('{"path":"/developer-guide/infrastructure.html","title":"Infrastructure","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Argo","slug":"argo","link":"#argo","children":[]},{"level":2,"title":"Setup","slug":"setup","link":"#setup","children":[{"level":3,"title":"Deploy witnesses","slug":"deploy-witnesses","link":"#deploy-witnesses","children":[]},{"level":3,"title":"Deploy watchers","slug":"deploy-watchers","link":"#deploy-watchers","children":[]}]},{"level":2,"title":"Next Steps","slug":"next-steps","link":"#next-steps","children":[]}],"git":{"updatedTime":1743170088000,"contributors":[{"name":"blelump","username":"blelump","email":"blelump@martex.nom.pl","commits":1,"url":"https://github.com/blelump"},{"name":"Robert Mitwicki","username":"","email":"robert.mitwicki@humancolossus.org","commits":7}],"changelog":[{"hash":"c931288231cb521a27bcffe5c422d01bcf716658","time":1743170088000,"email":"robert@thclab.online","author":"Robert Mitwicki","message":"docs: add link to dkms-demo"},{"hash":"db72128e69fd8039f0aa8605c976875754988f7d","time":1743157912000,"email":"robert@thclab.online","author":"Robert Mitwicki","message":"docs: remove iframe dashbaord"},{"hash":"67244a21ab5e351e1046fff8a072db62ad7c4631","time":1743156584000,"email":"robert@thclab.online","author":"Robert Mitwicki","message":"fix: https for dashboard"},{"hash":"133407c474153970359fc3ebd6317386db8e4c13","time":1743145767000,"email":"robert@thclab.online","author":"Robert Mitwicki","message":"docs: remove design part"},{"hash":"d51027bc18ada8e4a97a036c4da4eb674d2f7b35","time":1743003107000,"email":"robert@thclab.online","author":"Robert Mitwicki","message":"docs: Enhanced infra and client documentation"},{"hash":"4324f8679c586415a40d757b6ee9c6f9a0ed3217","time":1742505357000,"email":"robert.mitwicki@humancolossus.org","author":"Robert Mitwicki","message":"Change infrastructure repo for dkms-demo"},{"hash":"176c51f8928aaf51cb090728b540332b79817c33","time":1734205532000,"email":"robert.mitwicki@humancolossus.org","author":"Robert Mitwicki","message":"Update infrastructure.md"},{"hash":"8476aac830fd49f3e24796dd266a24f8c80f4fa8","time":1726590174000,"email":"blelump@martex.nom.pl","author":"blelump","message":"Split between introduction and dev guide"}]},"filePathRelative":"developer-guide/infrastructure.md"}');export{d as comp,h as data};
