import{_ as t,c as i,a,o as n}from"./app-B1H4axZY.js";const s="/dkms-arch-1.svg",r="/dkms-arch-2.svg",o={};function c(l,e){return n(),i("div",null,e[0]||(e[0]=[a('<h1 id="architecture" tabindex="-1"><a class="header-anchor" href="#architecture"><span>Architecture</span></a></h1><p>DKMS is designed to streamline complex technological processes, functioning as a seamless &quot;magic box&quot; for all users. By abstracting the difficulty of key management, DKMS allows entities to concentrate on their specific applications and use cases rather than the underlying security mechanisms. It effectively tackles the challenging issues of discoverability and information propagation about the key state of the identifier, transactions, and more within any given ecosystem. This architecture not only simplifies integration but also enhances the efficiency and reliability of digital interactions across diverse platforms and networks. With DKMS, users gain access to a robust framework that supports secure communications and data management without the need for deep technical knowledge.</p><p>On a very high level DKMS consists of two major components:</p><ul><li><strong>Propagation Infrastructure</strong>: allows entities to propagate their key state into the network and is designated by the controller himself.</li><li><strong>Duplicity Infrastructure</strong>: provides a mechanism for duplicity detection which is designated by the governance of the ecosystem.</li></ul><div class="hint-container tip"><p class="hint-container-title">IMPORTANT</p><p>Governance of duplicity infrastructure and propagation infrastructure should be split as it is crucial for the security of the whole ecosystem!</p></div><p><img src="'+s+'" alt="DKMS Architecture"></p><p>Looking deeper into the components we can see internal responsibility of each component and how they propagate through ecosystem.</p><p><img src="'+r+'" alt="DKMS Architecture"></p><p>DKMS simplifies the integration process by providing a user-friendly interface that can be effortlessly incorporated into specific use cases.</p><p>Leveraging <strong>Propagation infrastructure</strong> application can use its API to propagate key states to the network, at the same time witnessing the intention of the controller and protecting him from external exploitation of its identifier.</p><p>Using an <strong>Duplicity Infrastructure</strong> application can monitor other identifiers to ensure uniqueness and prevent duplicity within the system. These capabilities ensure that even the smallest ecosystem can seamlessly integrate and operate within larger frameworks, reflecting a fractal architecture. This design allows DKMS to efficiently span across different governance and jurisdictional boundaries, facilitating broad scalability and adaptability. By abstracting complex key management tasks, DKMS enables entities to focus on leveraging its robust features for enhanced security and operational efficiency in their digital environments.</p>',11)]))}const h=t(o,[["render",c]]),m=JSON.parse(`{"path":"/introduction/architecture.html","title":"DKMS Architecture","lang":"en-US","frontmatter":{"title":"DKMS Architecture","description":"Architecture of DKMS and it's components"},"headers":[],"git":{"updatedTime":1721919735000,"contributors":[{"name":"Robert Mitwicki","username":"","email":"robert@thclab.online","commits":1},{"name":"blelump","username":"blelump","email":"blelump@martex.nom.pl","commits":1,"url":"https://github.com/blelump"}],"changelog":[{"hash":"5c52d6f3d9662603ee65e5e1a8a9e9c03087e81a","time":1721919735000,"email":"blelump@martex.nom.pl","author":"blelump","message":"minor tweaks"},{"hash":"7ee504d68068ebeaab9591f67c2f456820de9031","time":1721850793000,"email":"robert@thclab.online","author":"Robert Mitwicki","message":"Expand content about what DKMS is"}]},"filePathRelative":"introduction/architecture.md"}`);export{h as comp,m as data};
